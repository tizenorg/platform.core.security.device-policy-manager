Policis for Application

The device policy manager provides named policies for enterprise application.
The applications can subscribe the policy changed event listed below table if they want to restrict
their operations in some circumstance.

+------------------------------+----------------------+-------------------------------------------------+
|          Policy Name         |     Policy state     |                Query API                        |
+------------------------------+----------------------+-------------------------------------------------+
| wifi                         | allowed / disallowed | dpm_restriction_get_wifi_state                  |
| wifi-hotspot                 | allowed / disallowed | dpm_restriction_get_wifi_hotspot                |
| wifi-profile-change          | allowed / disallowed | dpm_wifi_is_profile_change_restricted           |
| wifi-ssid-restriction        | allowed / disallowed | dpm_wifi_is_network_access_restricted           |
| bluetooth                    | allowed / disallowed | dpm_restriction_get_bluetooth_mode_change_state |
| bluetooth-tethering          | allowed / disallowed | dpm_restriction_get_bluetooth_tethering_state   |
| bluetooth-device-restriction | allowed / disallowed | dpm_bluetooth_is_device_restricted              |
| bluetooth-uuid-restriction   | allowed / disallowed | dpm_bluetooth_is_uuid_restricted                |
| usb                          | allowed / disallowed | dpm_restriction_get_usb_state                   |
| usb-tethering                | allowed / disallowed | dpm_restriction_get_usb_tethering_state         |
| usb-debugging                | allowed / disallowed | dpm_restriction_get_usb_debugging_state         |
| settings-changes             | allowed / disallowed | dpm_restriction_get_setting_changes_state       |
| external-storage             | allowed / disallowed | dpm_restriction_get_external_storage_state      |
| camera                       | allowed / disallowed | dpm_restriction_get_camera_state                |
| clipboard                    | allowed / disallowed | dpm_restriction_get_clipboard_state             |
| location                     | allowed / disallowed | dpm_restriction_get_location_state              |
| microphone                   | allowed / disallowed | dpm_restriction_get_microphone_state            |
+------------------------------+----------------------+-------------------------------------------------+

To subscribe the policy changed event, application should create context and then register
the policy changed callback like:

void policy_changed_cb(const char* name, const char* state, void *user_data)
{
	// Code which are executed when policy changed event occurs.
}

dpm_context_h context = dpm_context_create();
dpm_context_add_policy_changed_cb("policy name", policy_changed_cb, user_data, &id);


If interaction with the device policy manager is no longer required,
you must deregister the policy changed callback and free the context,

dpm_context_remove_policy_changed_cb(context, id);
dpm_context_destroy(context)


Each policy is also associated with the its query API to provide application ability to check
the current policy state enforced on the device at any given time.
In order to call those APIs, you should acquire policy interface first.

dpm_context_h context = dpm_create_context();
dpm_restriction_policy_h handle = dpm_context_acquire_restriction_policy(context);

Then, you can call policy query API like:

dpm_restriction_get_wifi_state(handle, &state);


The policy handle also needs to be released when interaction with the device policy manager
is no longer required.

dpm_context_release_restriction_policy(restriction);
dpm_context_destroy(context);
